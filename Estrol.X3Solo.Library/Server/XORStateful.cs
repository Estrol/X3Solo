namespace Estrol.X3Solo.Library.Server {
    public static class XORStateful {

        /**
         * O2-JAM Packet XOR Encrypt key
         * Taken from address: OTwo.exe#00E2AA8
         * Length: 744
         */
        public static readonly byte[] O2JamPacketXorKey = new byte[] {
            0x78, 0x2e, 0x2f, 0x8f, 0x65, 0x8c, 0xd9, 0xd3, 0xd0, 0x33, 0x45, 0xed,
            0x74, 0xbd, 0x8e, 0x5b, 0x6e, 0x9e, 0x2c, 0x71, 0xaf, 0x72, 0x33, 0xf5,
            0x84, 0x0c, 0xa9, 0xc7, 0x29, 0x85, 0xae, 0xad, 0x97, 0xee, 0x0a, 0xd5,
            0x4f, 0x2f, 0x5f, 0x60, 0x18, 0x1a, 0x06, 0x90, 0xff, 0xd5, 0x9e, 0x8e,
            0xe0, 0xd0, 0x7b, 0x38, 0x71, 0x3f, 0x49, 0x3a, 0x0c, 0x1d, 0x1e, 0x29,
            0xb2, 0x96, 0xd2, 0x8c, 0x15, 0xf7, 0xb0, 0xef, 0xa5, 0x26, 0x48, 0x36,
            0xbe, 0x08, 0xe0, 0x16, 0x4d, 0x35, 0x1d, 0x30, 0x22, 0x48, 0xdd, 0x11,
            0xb5, 0x8e, 0x39, 0xcd, 0xf7, 0xde, 0x70, 0x6e, 0xf8, 0x56, 0x03, 0x1f,
            0xad, 0x08, 0x4e, 0xfb, 0x2a, 0x7c, 0x1e, 0x30, 0x19, 0xdf, 0x3f, 0x96,
            0x8f, 0xe4, 0x54, 0x36, 0xc6, 0xbd, 0xa5, 0x42, 0xd0, 0xed, 0x5d, 0xd7,
            0xb5, 0x98, 0xf1, 0xe5, 0xbf, 0xb1, 0x9e, 0xe6, 0x48, 0x34, 0xc7, 0xdc,
            0x1c, 0xff, 0x6a, 0x08, 0xa7, 0x1b, 0x91, 0xfe, 0x4a, 0x27, 0x5c, 0x2c,
            0xa4, 0xb5, 0x06, 0x2e, 0xbb, 0xc5, 0xdb, 0x6f, 0x41, 0xd9, 0x15, 0x6e,
            0xfd, 0xad, 0x0e, 0xe7, 0x63, 0x56, 0xb5, 0xcd, 0xd6, 0xe4, 0x28, 0x27,
            0x8e, 0x46, 0x6e, 0x7f, 0x05, 0x8d, 0x5f, 0xfd, 0xc1, 0x6f, 0xd0, 0xba,
            0x98, 0x80, 0x3a, 0x76, 0xbf, 0xc7, 0x0d, 0x53, 0x14, 0x63, 0x8b, 0xd7,
            0x21, 0xa9, 0xb5, 0x3d, 0x05, 0xd4, 0x03, 0x9f, 0x63, 0x25, 0xb8, 0x3c,
            0xb9, 0x71, 0x12, 0xb7, 0x66, 0x7f, 0x5c, 0x9f, 0x32, 0x13, 0xcb, 0x36,
            0x4e, 0x78, 0x10, 0xa3, 0xfb, 0x3d, 0x8c, 0x5b, 0xd3, 0xc2, 0x39, 0x49,
            0xd5, 0xeb, 0xef, 0xcc, 0xea, 0x38, 0xfa, 0x75, 0x4e, 0x09, 0x50, 0x30,
            0xdb, 0x71, 0xf0, 0x9c, 0x7a, 0x46, 0xf2, 0x92, 0xb4, 0x32, 0x9e, 0xd6,
            0x66, 0xc9, 0xb6, 0x6d, 0x4f, 0xcf, 0x24, 0x6f, 0x78, 0x3d, 0x6b, 0xf4,
            0x72, 0x03, 0xa0, 0x19, 0x5f, 0x08, 0x22, 0x3b, 0xc9, 0x58, 0x9a, 0xa5,
            0x92, 0xea, 0xda, 0x63, 0x5d, 0xd8, 0x34, 0x54, 0x0c, 0xc4, 0xf0, 0x06,
            0x93, 0x51, 0x4b, 0x60, 0xaf, 0xfe, 0x6c, 0x1d, 0xeb, 0x92, 0x66, 0x24,
            0x74, 0x3a, 0x57, 0xf3, 0x46, 0xe2, 0xf6, 0xa5, 0x08, 0x6e, 0x4f, 0xae,
            0xb4, 0x69, 0xa6, 0x8f, 0x3b, 0xdb, 0x95, 0x5b, 0x65, 0xb3, 0x6f, 0x12,
            0xfc, 0x0a, 0x23, 0x21, 0xe0, 0xdb, 0x2a, 0x5d, 0x83, 0xa4, 0xa7, 0x6a,
            0xaf, 0x4c, 0x0b, 0xff, 0xfa, 0x24, 0x6f, 0x75, 0x86, 0x5b, 0xc8, 0xb9,
            0xf6, 0x1f, 0x63, 0x62, 0x27, 0xc1, 0xf4, 0x73, 0xc4, 0x11, 0x05, 0x87,
            0x0b, 0x37, 0xab, 0x23, 0x26, 0x53, 0xaa, 0xd9, 0x80, 0x33, 0x42, 0x64,
            0xfa, 0x7f, 0x88, 0x58, 0x73, 0x40, 0x09, 0x93, 0xaf, 0x7e, 0x6d, 0x1b,
            0x78, 0x23, 0x5d, 0xd0, 0x9b, 0xc6, 0xfa, 0x89, 0x00, 0x8f, 0xab, 0x16,
            0x4d, 0x30, 0x7a, 0xc1, 0xbf, 0x61, 0xd7, 0x2e, 0xe4, 0xf3, 0x53, 0xbe,
            0xec, 0x01, 0x59, 0x8a, 0xfa, 0x48, 0x29, 0x93, 0x44, 0x84, 0x77, 0x80,
            0x1f, 0x42, 0xbf, 0x01, 0xe0, 0x51, 0xe7, 0x67, 0x9f, 0xdf, 0x8d, 0xe5,
            0xd5, 0xcd, 0x61, 0xaa, 0xe3, 0x07, 0xa9, 0x35, 0x83, 0x01, 0x96, 0xaf,
            0xb0, 0xe6, 0xbb, 0x8a, 0xec, 0x3f, 0xe9, 0x1f, 0x69, 0xce, 0x5d, 0x3a,
            0xd4, 0x13, 0xdf, 0xa2, 0x21, 0x71, 0x98, 0xc5, 0x12, 0x5b, 0x39, 0x4d,
            0xda, 0x30, 0x88, 0xd5, 0x19, 0x86, 0x01, 0x5a, 0x3e, 0x46, 0x7b, 0xb0,
            0xd0, 0xb9, 0x47, 0x81, 0x51, 0x83, 0x1f, 0xad, 0x1c, 0xe7, 0xf9, 0xb7,
            0xb0, 0x96, 0x99, 0xda, 0x8d, 0x65, 0x6c, 0x5d, 0x3b, 0xf2, 0xe8, 0x3e,
            0xaa, 0x9f, 0x43, 0x31, 0xfd, 0xd3, 0x06, 0x2c, 0x15, 0x46, 0xa2, 0x95,
            0x0c, 0x5b, 0x7b, 0xe7, 0x55, 0x92, 0x8f, 0x36, 0xee, 0x2e, 0x84, 0x87,
            0x71, 0xff, 0xe9, 0xd5, 0x52, 0x41, 0x09, 0x04, 0xd8, 0xa4, 0xf3, 0x43,
            0x77, 0xd0, 0xfc, 0xbb, 0x68, 0x01, 0xb8, 0x5d, 0xf2, 0xc5, 0xbd, 0xd2,
            0xca, 0xa1, 0x8a, 0xf1, 0xd7, 0x11, 0xc6, 0x8f, 0xa4, 0x91, 0xea, 0x4f,
            0x9c, 0x82, 0xe7, 0xd5, 0x7f, 0x3e, 0x5e, 0x65, 0x4b, 0x73, 0x60, 0x02,
            0x1e, 0x2f, 0x77, 0x5a, 0x6d, 0xb6, 0x35, 0x6c, 0xe0, 0x60, 0x3f, 0xb5,
            0x16, 0xb0, 0x93, 0x47, 0x67, 0xc8, 0xd8, 0x7b, 0xd1, 0xd9, 0xbd, 0x03,
            0x46, 0x3d, 0x95, 0xdb, 0xf6, 0x8d, 0xf3, 0x51, 0xbf, 0x88, 0x62, 0x4e,
            0x84, 0x27, 0x53, 0xe2, 0x1c, 0xa4, 0x9c, 0x66, 0x3d, 0x85, 0x29, 0x8f,
            0xd8, 0x33, 0xb4, 0x42, 0x6b, 0xc0, 0x94, 0x98, 0x61, 0xb1, 0x58, 0xf8,
            0x47, 0x11, 0x9e, 0x23, 0x16, 0xe2, 0x50, 0x65, 0x13, 0x23, 0xda, 0x4a,
            0x2a, 0x38, 0x77, 0xbf, 0x08, 0x47, 0x1a, 0x61, 0xf2, 0xd8, 0xdc, 0xed,
            0xb4, 0x39, 0x49, 0x57, 0xb5, 0x5b, 0x06, 0x93, 0x73, 0x8a, 0xd9, 0x59,
            0xaa, 0x6f, 0x15, 0x02, 0xe4, 0x1d, 0x88, 0xf3, 0x04, 0x67, 0x1f, 0x68,
            0x85, 0xca, 0x8b, 0xdb, 0x1c, 0x76, 0x1a, 0x8e, 0x94, 0x62, 0x4f, 0xbc,
            0x57, 0x00, 0xb0, 0xef, 0xa4, 0xd4, 0x54, 0x48, 0xa9, 0x8d, 0x2b, 0xa2,
            0xe5, 0xeb, 0x85, 0xe1, 0xbc, 0x87, 0xb8, 0x67, 0xa5, 0xae, 0x93, 0x02,
            0xf9, 0xb3, 0xd6, 0xae, 0x91, 0x22, 0xf1, 0x39, 0x1b, 0x66, 0xc9, 0xa0,
            0x9a, 0x3b, 0xdb, 0x68, 0xca, 0x94, 0x03, 0x70, 0xf1, 0x02, 0xb1, 0x00
        };

        /// <summary>
        /// Create XOR Key stateful for current client session
        /// </summary>
        /// <returns>Stateful</returns>
        public static Stateful CreateStatefulPacketSession() {
            return new(O2JamPacketXorKey);
        }

        public class Stateful {
            private int Index;
            private readonly byte[] Key;

            public Stateful(byte[] key) {
                Key = key;
                Index = 0;
            }

            public void StatefulXor(byte[] data) {
                for (int i = 0; i < data.Length; i++) {
                    data[i] ^= Key[Index];
                    Index++;

                    if (Index >= Key.Length) {
                        Index = 0;
                    }
                }
            }
        }
    }
}
